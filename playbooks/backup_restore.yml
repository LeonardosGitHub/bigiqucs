---
- name: "Using BIG-IQ: Generate backup/ucs of group based on existing schedule; Deploy UCS to BIG-IPs"
  hosts: bigiq
  #connection: local
  gather_facts: no

  collections:
    - f5networks.f5_modules

  vars:
    user: admin
    #password: <password>
    existingBackupName: ansible-backup
    backupDict: {}
    targetLinkDevices: {}
    targetDevices: {}
    targetDeviceswFile: {}
    filesToTransfer: []


  vars_prompt:
    - name: password
      prompt: "Enter Password"
      private: yes

  #   - name: existingBackupName
  #     prompt: "Copy and paste your existing scheduled Backup name here"
  #     private: no

  tasks:

  - name: Get timestamp from the system
    shell:
      cmd: "date +%Y%m%d%H%M"
      executable: /bin/bash
    register: day_time
    

  - name: Set Fact - set day_time var
    set_fact: 
      day_time: "{{day_time.stdout}}"

  - name: Set Fact - set name of deployment
    set_fact:
      nameOfDeployment: "ansibleDeploy_{{day_time}}"
      
  - name: GET - list of all scheduled backups from BIG-IQ
    uri:
      url: "https://{{inventory_hostname}}/mgmt/shared/task-scheduler/scheduler/"
      method: GET
      user: "{{user}}"
      password: "{{password}}"
      validate_certs: no
      force_basic_auth: yes
    delegate_to: localhost
    register: scheduledBackups

  - name: Print result of get for scheduled backups
    debug:
      msg: "{{scheduledBackups}}"
      verbosity: 1

  - name: Set_fact - create dict of scheduled backup values that match provided name
    set_fact: 
      backupDict: "{{ scheduledBackups | json_query(query_json) }}"
    vars:
      query_json: >
        {"devicesReference": json.items[?name=='{{existingBackupName}}'].taskBodyToRun.devicesReference, "taskReference": json.items[?name=='{{existingBackupName}}'].taskBodyToRun.taskReference, "taskBody": {"namePrefix": '{{nameOfDeployment}}_', "includePrivateKeys": json.items[?name=='{{existingBackupName}}'].taskBodyToRun.taskBody.includePrivateKeys, "isEncrypted": json.items[?name=='{{existingBackupName}}'].taskBodyToRun.taskBody.isEncrypted, "backupLifeTime": '1', "shouldCreateArchive": 'false', "name": '{{nameOfDeployment}}.ucs', "selfLink": json.items[?name=='{{existingBackupName}}'].selfLink, "obfuscatedPassphrase": json.items[?name=='{{existingBackupName}}'].taskBodyToRun.taskBody.obfuscatedPassphrase}}

  - name: Print dict of backup values
    debug:
      msg: "{{ backupDict }}"
      #verbosity: 1


######  Initiating UCS backup now ######

  - name: POST - to initiate scheduled backup task
    uri:
      url: "https://{{inventory_hostname}}/mgmt/shared/group-task"
      method: POST
      user: "{{user}}"
      password: "{{password}}"
      validate_certs: no
      status_code: 202
      body: 
        devicesReference: "{{backupDict.devicesReference[0]}}"
        taskReference: "{{backupDict.taskReference[0]}}"
        taskBody:
          namePrefix: "{{backupDict.taskBody.namePrefix}}"
          includePrivateKeys: "{{backupDict.taskBody.includePrivateKeys[0]}}"
          isEncrypted: "{{backupDict.taskBody.isEncrypted[0]}}"
          backupLifeTime: "{{backupDict.taskBody.backupLifeTime}}"
          shouldCreateArchive: "{{backupDict.taskBody.shouldCreateArchive}}"
          name: "{{backupDict.taskBody.name}}"
          selfLink: "{{backupDict.taskBody.selfLink[0]}}"
          obfuscatedPassphrase: "{{backupDict.taskBody.obfuscatedPassphrase[0]}}"
      body_format: json
    delegate_to: localhost
    register: resultInitiateBackup
    when: backupDict.taskBody.obfuscatedPassphrase[0] is defined

  - name: Print results of initiating backup
    debug:  
      msg: "{{ resultInitiateBackup }}"
      verbosity: 1

  - name: Set_fact - get task ID from scheduled backup task
    set_fact: 
      taskID: "{{ resultInitiateBackup | json_query(query_json) }}"
    vars:
      query_json: >
        json.id

  - name: Print results of taskID
    debug:  
      msg: "{{ taskID }}"
      verbosity: 1

  - name: GET - to check status of backup, waiting/checking for task to 'FINISHED' status
    uri:
      url: "https://{{inventory_hostname}}/mgmt/shared/group-task/{{taskID}}"
      method: GET
      user: "{{user}}"
      password: "{{password}}"
      validate_certs: no
    delegate_to: localhost
    register: statusOfBackup
    until: statusOfBackup.json.status.find("FINISHED") != -1
    retries: 45
    delay: 20

  - name: Print results of status check of backup
    debug:  
      msg: "{{ statusOfBackup }}"
      verbosity: 1

##########  CREATING DICTIONARY OF DEVICES BEING BACKED UP #############

  - name: Set Fact - set variable to number of devices in backup task
    set_fact:
      numOfDevices: "{{ statusOfBackup | json_query('json.startedTaskReferences[].link | length(@)') }}"

  - name: Set Fact - create dict of links for devices in backup task
    set_fact: 
      targetLinkDevices: "{{  targetLinkDevices | combine({item: statusOfBackup | json_query(query_json) |  urlsplit('path')}) }}"
    vars:
      query_json: >
        json.startedTaskReferences[{{item}}].link
    loop: "{{ range(0, (numOfDevices | int)) |list }}"

  - name: GET - list of devices and device specific information for backup to create dictionary of devices
    uri:
      url: "https://{{inventory_hostname}}{{item.value}}"
      method: GET
      user: "{{user}}"
      password: "{{password}}"
      validate_certs: no
    delegate_to: localhost
    register: devicesToBeBackedup
    loop: "{{ targetLinkDevices | dict2items }}"
  
  - name: Print results - list of devices for backup to create dictionary
    debug:
      msg: "{{ devicesToBeBackedup }}"
      verbosity: 1

  - name: Set Fact - create dict of devices to be updated
    set_fact: 
      targetDevices: "{{  targetDevices | combine({item: devicesToBeBackedup | json_query(query_json)}) }}"
    vars:
      query_json: >
        {"device": results[{{item}}].json.device.hostname, "address": results[{{item}}].json.device.address, "machineId": results[{{item}}].json.device.machineId, "fileName": results[{{item}}].json.name}
    loop: "{{ range(0, (numOfDevices | int)) |list }}"

  - name: Print results of device dictionary
    debug:
      msg: "{{ targetDevices }}"
      verbosity: 1
  
  - name: Write targetDevices dictionary to a file for backup purposes
    copy: 
      content="targetDevices{{ ":" }} {{ targetDevices }}"
      dest=../vars/targetDevices.json
    delegate_to: localhost

######  BELOW IS TO DOWNLOAD RECENTLY CREATED UCS #####

  - name: Find ucs files on BIG-IQ that were created and put into a list
    find:
      paths: /shared/ucs_backups/
      patterns: '{{nameOfDeployment}}.*'
      use_regex: yes
    register: findFiles
  
  - name: print findFiles
    debug:
      msg: "{{findFiles}}"
      verbosity: 1

  - name: Set Fact - file names to transfer to devices
    set_fact:
      findFiles: "{{ findFiles | json_query(query_json) }}"
    vars:
      query_json: >
        files[].path
  
  - name: print findFiles
    debug:
      msg: "{{findFiles}}"
      verbosity: 1

  - name: Set Fact - filter path to get only the name of file
    set_fact:
      filesToTransfer: "{{ filesToTransfer + [item | basename] }}"
    with_items: "{{ findFiles }}"
  
  - name: Print filesToTransfer
    debug:
      msg: "{{filesToTransfer}}"
      verbosity: 1
  
  - name: Fetch - pull the ucs files that were just created from BIG-IQ to Ansible host
    fetch:
      src: /shared/ucs_backups/{{item}}
      dest: ../ucs/
      flat: yes
    with_items: "{{ filesToTransfer }}"


######  PAUSE TO ALLOW FOR RE-PAVE ACTIVITIES #####

  - name: Print msg about waiting for re-pave
    debug:
      msg: "The playbook will pause while a re-pave effort is completed. Please follow the PAUSE instructions. -tmsh load sys config default -Reboot -set Password"


  - name: Pause for 14400 seconds (4 hours)
    pause:
      seconds: 14400

#####  BELOW IS TO UPLOAD and install UCS BIG-IPs #####

  - name: Set the hostname of the BIG-IP
    bigip_hostname:
      hostname: "{{item.value.device}}"
      provider:
        server: "{{item.value.address}}"
        server_port: "{{item.value.serverPort}}"
        user: "{{user}}"
        password: "{{password}}"
        validate_certs: no
    delegate_to: localhost
    loop: "{{ targetDevices | dict2items }}"
    tags:
      - uploadInstallUCS

  - name: Upload UCS
    bigip_ucs:
      ucs: "../ucs/{{item.value.fileName}}"
      state: installed
      passphrase: "{{password}}"
      provider:
        server: "{{item.value.address}}"
        server_port: "{{item.value.serverPort}}"
        user: "{{user}}"
        password: "{{password}}"
        validate_certs: no
    delegate_to: localhost
    ignore_errors: True
    loop: "{{ targetDevices | dict2items }}"
    tags:
      - uploadInstallUCS

  - name: Get status of devices in BIG-IQ, once device on BIG-IQ turn "green" it'll pass condition
    uri:
      url: "https://{{inventory_hostname}}/mgmt/shared/resolver/device-groups/cm-bigip-allBigIpDevices/devices/{{item.value.machineId}}/stats"
      method: GET
      status_code: 200
      user: "{{user}}"
      password: "{{password}}"
      validate_certs: no
    delegate_to: localhost
    register: getStatusOnBigiq
    loop: "{{ targetDevices | dict2items }}"
    until: getStatusOnBigiq['json']['entries']['health.summary']['value'] == 1.0
    retries: 90
    delay: 20
    tags:
      - uploadInstallUCS

  - name: debug
    debug:
      msg: '{{getStatusOnBigiq | json_query(query_json)}}'
    vars:
      query_json: >
        results[].json.entries."health.summary".value
    tags:
      - uploadInstallUCS
