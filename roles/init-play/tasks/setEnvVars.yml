

- name: print
  debug:
    msg: "{{item | basename}}"
  loop: "{{ lookup('fileglob', '../ucs/*', wantlist=True) }}"

- name: Get timestamp from the system
  shell: "date +%Y%m%d%H%M"
  register: day_time

- name: set day & time var
  set_fact:
    day_time: "{{day_time.stdout}}"

- name: print day & time var
  debug:
    msg: "{{day_time}}"

- name: set name of deployment
  set_fact:
    nameOfDeployment: "ansibleDeploy_{{day_time}}"

- name: GET - list of scheduled backups
  uri:
    url: "https://{{inventory_hostname}}/mgmt/shared/task-scheduler/scheduler/"
    method: GET
    user: "{{user}}"
    password: "{{password}}"
    validate_certs: no
  delegate_to: localhost
  register: scheduledBackups

- name: Print result of get for scheduled backups
  debug:
    msg: "{{scheduledBackups}}"
    verbosity: 1

- name: Set_fact - create dict of scheduled backup values
  set_fact: 
    backupDict: "{{ scheduledBackups | json_query(query_json) }}"
  vars:
    query_json: >
      {"devicesReference": json.items[?name=='{{existingBackupName}}'].taskBodyToRun.devicesReference, "taskReference": json.items[?name=='{{existingBackupName}}'].taskBodyToRun.taskReference, "taskBody": {"namePrefix": '{{nameOfDeployment}}_', "includePrivateKeys": json.items[?name=='{{existingBackupName}}'].taskBodyToRun.taskBody.includePrivateKeys, "isEncrypted": json.items[?name=='{{existingBackupName}}'].taskBodyToRun.taskBody.isEncrypted, "backupLifeTime": '1', "shouldCreateArchive": 'false', "name": '{{nameOfDeployment}}.ucs', "selfLink": json.items[?name=='{{existingBackupName}}'].selfLink, "obfuscatedPassphrase": json.items[?name=='{{existingBackupName}}'].taskBodyToRun.taskBody.obfuscatedPassphrase}}

- name: Print dict of backup values
  debug:
    msg: "{{ backupDict }}"
    #verbosity: 1

- name: Get URL for devicesLink
  set_fact:
    devicesLink: "{{ backupDict.devicesReference[0].link | urlsplit('path') }}"
    #verbosity: 1

- name: GET - list of devices for backup to create dictionary
  uri:
    url: "https://{{inventory_hostname}}{{devicesLink}}"
    method: GET
    user: "{{user}}"
    password: "{{password}}"
    validate_certs: no
  delegate_to: localhost
  register: devicesToBeBackedup

- name: Print results of device targets
  debug:
    msg: "{{ devicesToBeBackedup }}"
    #verbosity: 1

- name: Set_fact - set variable to number of devices
  set_fact:
    numOfDevices: "{{ devicesToBeBackedup | json_query('json.items[] | length(@)') }}"

- name: Set_fact - create dict of devices to be updated
  set_fact: 
    targetDevices: "{{  targetDevices | combine({item: devicesToBeBackedup | json_query(query_json)}) }}"
    #childPoliciesDict: "{{  childPoliciesDict | combine({item: childPolicies | json_query(query_json)}) }}"
  vars:
    query_json: >
      {"device": json.items[{{item}}].hostname, "address": json.items[{{item}}].address, "machineId": json.items[{{item}}].machineId, "file": ""}
  loop: "{{ range(0, (numOfDevices | int)) |list }}"

- name: Print results of device dictionary
  debug:
    msg: "{{ targetDevices }}"
    #verbosity: 1